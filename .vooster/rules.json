{
  "rules": [
    {
      "type": "prd",
      "content": "# 제품 요구사항 문서(PRD)\n\n## 1. 개요\n일본어 라디오 방송을 들으며 스크립트를 한 줄씩 따라 읽고, 단어장을 통해 어휘를 학습할 수 있는 웹 서비스. 사용자는 좋아하는 콘텐츠로 학습 지속성을 높이고, 문장·단어 단위 상호작용으로 몰입형 학습 경험을 얻는다.\n\n## 2. 문제 정의\n- 라디오·팟캐스트 기반 일본어 학습 서비스가 부족해 학습 소재 다양성이 떨어짐  \n- 스크립트와 오디오가 분리돼 있어 동시 학습이 불편  \n- 수집한 단어를 체계적으로 복습할 도구 부족  \n- 기존 앱(듀오링고 등)은 게임화에 치중, 실제 청취·발화 능력 향상 한계\n\n## 3. 목표 및 목적\n- 주요 목표: 라디오 스크립트 연동 청취·읽기·단어장 통합 학습 제공  \n- 부가 목표  \n  - 학습 지속성 30%↑  \n  - 사용자 제작(UGC) 스크립트 20% 확보  \n- 성공 지표  \n  - WAU 10K, 평균 학습 세션 15분  \n  - 단어장 저장 수/인당 ≥30개  \n  - NPS ≥45\n\n## 4. 타깃 유저\n### 1차 유저\n- 20~30대 애니·라디오 팬, 일본어 초중급자  \n- 모바일·웹 청취 습관, 짧은 여가 시간 활용\n### 2차 유저\n- 일본어 교사, 팟캐스터, 학습 커뮤니티 운영자\n\n## 5. 사용자 스토리\n- “일본어 초급자로서 라디오를 들으며 문장을 클릭하면 해당 구간이 바로 재생되길 원한다, 그래서 발음·억양을 반복 청취하고 따라 읽을 수 있다.”  \n- “단어를 클릭해 뜻·예문을 보고 내 단어장에 저장하고 싶다, 그래야 복습 가능하다.”  \n- “라디오를 들으며 자동으로 현재 문장을 하이라이트해 눈으로 따라가기 편했으면 좋겠다.”  \n- “다크모드·폰트 크기 조절 등 접근성 옵션이 있었으면 한다.”\n\n## 6. 기능 요구사항\n### 핵심 기능\n1. 라디오 스트림/녹음 재생  \n   - 재생/일시정지·구간 탐색  \n   - 문장 클릭 시 해당 타임스탬프로 점프  \n   - 수집·캐시 지연 ≤1s\n\n2. 스크립트 싱크(한줄 재생)  \n   - 오디오-스크립트 타임코드 자동/수동 매핑  \n   - 현재 재생 문장 하이라이트(카라오케 모드)  \n   - 줄 단위 반복 재생(AB 구간)  \n\n3. 단어장  \n   - 단어 클릭 → 의미·품사·예문 팝업  \n   - “저장” 시 개인 단어장에 추가, 태그·레벨 지정  \n   - 복습 모드: 플래시카드, 빈칸 채우기, 철자 게임  \n\n4. 계정 및 프로필  \n   - 소셜 로그인(Google, Apple)  \n   - 학습 통계(청취 시간, 저장 단어, 진행률)  \n\n### 보조 기능\n- 추천 라디오/애니 OST 리스트  \n- 자동 단어 추출 & 난이도 분석  \n- 다크모드, 폰트·행간 조절  \n- 학습 리마인더 알림(웹푸시/이메일)  \n- 커뮤니티 리뷰·스크립트 공유\n\n## 7. 비기능 요구사항\n- 성능: TTI ≤2.5s, 오디오 버퍼링 <500ms  \n- 보안: OAuth2, Supabase Row-Level Security, HTTPS  \n- 사용성: WCAG 2.1 AA, 키보드 탐색 100%  \n- 확장성: 동시 접속 50K, 멀티 테넌시 설계  \n- 호환성: 최신 크롬·사파리·파이어폭스·모바일 브라우저\n\n## 8. 기술 고려사항\n- 프런트엔드: SvelteKit + TailwindCSS + DaisyUI  \n- 백엔드: FastAPI(Python) REST, WebSocket 실시간 싱크  \n- DB/Auth/Storage: Supabase(Postgres, Edge Functions)  \n- 오디오 스티칭: FFmpeg & HLS, CDN 캐싱(Cloudflare)  \n- 인프라: Vercel(프론트) + Fly.io/Render(API)  \n- 통합: 외부 사전 API(JMdict), TTS(선택)  \n- 데이터 모델: User, Script, Sentence, Word, Bookmark, Progress\n\n## 9. 성공 지표\n- 제품: WAU, 평균 세션 길이, 반복 방문율  \n- 비즈니스: 프리미엄 전환율 5%, ARPU $2  \n- 기술: Crash Free Rate ≥99.8%, p95 API 300ms 이하\n\n## 10. 일정 & 마일스톤\n- Phase 0(1주): 기획 확정, 와이어프레임  \n- Phase 1(6주): MVP – 재생, 스크립트 싱크, 계정  \n- Phase 2(4주): 단어장, 복습 모드, 통계  \n- Phase 3(3주): 추천·알림, 커뮤니티, i18n  \n- Beta Launch: 2024-09  \n- GA & 마케팅: 2024-11\n\n## 11. 위험 및 대응\n- 오디오 저작권 이슈 → 방송국 제휴·CC 라이선스 사용  \n- 스크립트 싱크 정확도 ↓ → AI 정렬 + 수동 편집기 제공  \n- 초기 콘텐츠 부족 → UGC 업로드 인센티브, 파트너십  \n- 성능 병목 → CDN·분산 DB, Lazy load\n\n## 12. 향후 과제\n- 모바일 네이티브 앱(iOS/Android)  \n- AI 발음 피드백·음성 인식 퀴즈  \n- JLPT 레벨별 코스·커리큘럼  \n- B2B: 일본어 학원·대학교 LMS 통합",
      "writedAt": "2025-07-01T10:49:11.604Z"
    },
    {
      "type": "architecture",
      "content": "# Technical Requirements Document (TRD)\n\n## 1. Executive Technical Summary\n- **프로젝트 개요**  \n  일본어 라디오·팟캐스트 오디오와 스크립트를 실시간 싱크하여 청취·발화·어휘 학습을 통합 제공하는 웹 서비스. 모바일·데스크톱 브라우저에서 동일 경험을 보장하며, 개인 단어장·복습 모드·UGC 스크립트 공유 기능을 포함한다.\n- **코어 기술 스택**  \n  - Frontend: SvelteKit (v1.x) + TypeScript + TailwindCSS + DaisyUI  \n  - Backend: Python 3.11 + FastAPI (v0.110) + Uvicorn + WebSocket  \n  - DB/Auth/Storage: Supabase (PostgreSQL 15, Row-Level Security, Storage, Realtime)  \n  - 인프라: Vercel(프론트), Fly.io(Backend API), Cloudflare CDN(HLS 오디오)  \n  - 오디오 파이프라인: FFmpeg, HLS, Supabase Storage → Cloudflare  \n- **핵심 기술 목표**  \n  - TTI ≤ 2.5 s, p95 API ≤ 300 ms, 오디오 버퍼링 < 500 ms  \n  - 동시 접속 50 K 지원, 99.8 % Crash-Free, 99.95 % 가용성  \n  - WCAG 2.1 AA, 키보드 탐색 100 %  \n- **주요 기술 가정**  \n  1. 저작권은 CC 또는 제휴된 라디오 스트림만 사용  \n  2. 초기 콘텐츠 10 GB, 월간 트래픽 5 TB로 시작  \n  3. 실시간 싱크 정확도 ±200 ms 허용  \n  4. 팀 구성: FE 2, BE 2, DevOps 1, QA 1\n\n## 2. Technology Stack Architecture\n### Frontend Technology Stack\n| 카테고리 | 선택 기술 | 세부 내용 |\n|---|---|---|\n| Core Framework | SvelteKit 1.x | 동적 라우팅 + SSR/SPA 하이브리드 |\n| State Management | Svelte store + zustand style 커스텀 스토어 | 글로벌 학습 상태·플레이어 제어 |\n| Routing & Navigation | SvelteKit 내장 라우터 | 파일 기반, lazy load |\n| UI/UX Framework | DaisyUI + TailwindCSS | 다크모드·접근성 토큰 내장 |\n| Build Tools | Vite 4, pnpm, eslint, prettier, Playwright e2e | CI 병렬 테스트 지원 |\n\n### Backend Technology Stack\n| 카테고리 | 선택 기술 | 세부 내용 |\n|---|---|---|\n| Runtime | Python 3.11 (CPython) | async/await 기반 I/O |\n| Web Framework | FastAPI 0.110 + Uvicorn | ASGI, pydantic v2 |\n| API Design | RESTful v1 / WebSocket(channel: `/ws/player`) | Swagger 자동 문서화 |\n| Data Validation | Pydantic & RLS | 입력·출력 스키마 통합 |\n| Middleware | CORS, OAuth2(JWT), Prometheus, Sentry | 공통 로깅·트레이싱 |\n\n### Database & Persistence Layer\n| 항목 | 내용 |\n|---|---|\n| Primary DB | Supabase PostgreSQL 15 (Tokyo region) |\n| Schema Design | 3NF 기반, 주요 테이블: `users`, `scripts`, `sentences`, `words`, `bookmarks`, `progress` |\n| Caching | Cloudflare CDN(HLS·정적), Redis (Fly.io 내부) – 플레이어 메타데이터 5 min TTL |\n| Migration | Supabase Migrations + Alembic 버전 태깅 |\n| Backup & Recovery | 일일 Wal-G 스냅샷, 30일 보존, RPO 5 min |\n\n### Infrastructure & DevOps\n| 항목 | 내용 |\n|---|---|\n| Hosting | Vercel FE(Edge Functions 미사용), Fly.io BE(2 × shared-cpu-1x) |\n| Containerization | Docker multi-stage, Fly.io deploy toml |\n| CI/CD | GitHub Actions: lint→test→build→deploy, PR 세분화 |\n| Monitoring | Prometheus + Grafana(Fly.io), Vercel Analytics, Sentry (FE/BE) |\n| Logging | Loki + Grafana Cloud; 구조적 JSON 로그 |\n\n## 3. System Architecture Design\n### Top-Level Building Blocks\n- **Frontend Web App**  \n  - SvelteKit SPA/SSR, Audio Player, Script Sync UI, Vocabulary UI  \n- **Backend API**  \n  - REST / WebSocket, Auth, Sentence Sync Service, Word Lookup Proxy  \n- **Database Layer**  \n  - Supabase Postgres + RLS, Edge Caching, Realtime Channels  \n- **Media Pipeline**  \n  - FFmpeg Transcoder, HLS Segmenter, Cloudflare CDN distribution  \n- **DevOps & Observability**  \n  - CI/CD pipelines, Monitoring, Alertmanager, Central Log Store  \n\n### Top-Level Component Interaction Diagram\n```mermaid\ngraph TD\n    A[SvelteKit Frontend] -- HTTPS --> B[FastAPI Backend]\n    B -- Supabase Client --> C[Supabase DB & Storage]\n    B -- WebSocket --> A\n    C -- Realtime Channels --> A\n    B -- HLS URL Signed --> D[Cloudflare CDN]\n    D -- .m3u8/.ts --> A\n```\n- 브라우저는 FastAPI REST로 초기 데이터, 이후 WebSocket으로 실시간 상태 수신  \n- FastAPI는 Supabase Postgres에 Row-Level Security 기반 쿼리 수행  \n- 오디오 파일은 HLS URL 서명 후 Cloudflare CDN에서 스트리밍  \n- Supabase Realtime은 UGC 스크립트 편집 변경 사항을 프런트에 푸시\n\n### Code Organization & Convention\n**Domain-Driven Organization Strategy**\n- 도메인: `auth`, `content`, `learning`, `userStats` 등 경계 정의  \n- 레이어: presentation → application(service) → domain(model) → infrastructure  \n- 기능 단위 모듈: SentenceSync, Vocabulary, Player, Review  \n- 공유 모듈: 공통 UI, hooks, DTO, error handler\n\n**Universal File & Folder Structure**\n```\n/project-root\n├── frontend/\n│   ├── src/\n│   │   ├── lib/\n│   │   │   ├── components/\n│   │   │   ├── stores/\n│   │   │   ├── hooks/\n│   │   │   └── utils/\n│   │   ├── routes/\n│   │   │   ├── +layout.svelte\n│   │   │   └── (auth|player|vocab)/+page.svelte\n│   │   └── styles/\n│   ├── static/\n│   └── package.json\n├── backend/\n│   ├── app/\n│   │   ├── api/\n│   │   │   ├── v1/\n│   │   │   │   ├── auth.py\n│   │   │   │   ├── scripts.py\n│   │   │   │   └── words.py\n│   │   ├── services/\n│   │   ├── models/\n│   │   ├── websocket/\n│   │   ├── core/\n│   │   └── utils/\n│   ├── Dockerfile\n│   └── pyproject.toml\n├── database/\n│   ├── migrations/\n│   ├── seeds/\n│   └── schema.sql\n└── infrastructure/\n    ├── fly/\n    ├── vercel/\n    ├── scripts/\n    └── monitoring/\n```\n\n### Data Flow & Communication Patterns\n- **Client-Server**: REST (등록/조회) + WebSocket (문장 진행 이벤트)  \n- **DB Interaction**: Supabase JS client(프론트) / async-pg(백엔드) → RLS  \n- **외부 서비스**: JMdict 사전 API 프록시 캐시 24 h, OAuth(Google·Apple)  \n- **Real-time**: `player_progress` 채널(WebSocket) → 다중 기기 동기화  \n- **데이터 동기화**: Optimistic UI 업데이트 후 WebSocket ack 수신\n\n## 4. Performance & Optimization Strategy\n- Cloudflare CDN 기반 HLS edge 캐싱, 첫 세그먼트 프리로딩으로 버퍼링 최소화  \n- SvelteKit SSR → critical CSS inlined, 나머지 lazy component 분할  \n- p95 쿼리 분석 & Supabase 인덱스 튜닝 (`sentences(script_id, ts)`)  \n- FastAPI Uvicorn workers Auto-scale(Fly.io) → CPU/IO 부하 분리\n\n## 5. Implementation Roadmap & Milestones\n### Phase 1: Foundation (MVP) – 6 주\n- 인프라: Vercel·Fly.io 셋업, Supabase 초기 스키마  \n- 필수 기능: 재생·일시정지, 스크립트 싱크, 소셜 로그인, 프로필  \n- 보안: HTTPS, OAuth2, RLS 기본 정책  \n- CI/CD: GitHub Actions lint/test/deploy 파이프라인  \n- 완료 목표: 2024-07-31\n\n### Phase 2: Feature Enhancement – 4 주\n- 단어장 CRUD, 복습(플래시카드) 모드, 학습 통계 대시보드  \n- 퍼포먼스: 이미지·오디오 lazy load, DB 인덱스 추가  \n- 보안 확장: 2FA 옵션, Sentry alert  \n- 모니터링: Prometheus alerts 80 % 커버리지  \n- 완료 목표: 2024-09-01 (베타 런치)\n\n### Phase 3: Scaling & Optimization – 3 주\n- Auto-scaling(Fly.io Machines), Redis 캐시 도입, 멀티 테넌시  \n- 고급 통합: 학습 리마인더 이메일, 커뮤니티 리뷰, 추천 알고리즘  \n- 엔터프라이즈: Supabase PITR, 감사 로그, GDPR 데이터 삭제 API  \n- 완료 목표: 2024-10-15 (GA 준비)\n\n## 6. Risk Assessment & Mitigation Strategies\n### Technical Risk Analysis\n| 위험 | 설명 | 대응 |\n|---|---|---|\n| 오디오 저작권 | 라디오 스트림 사용 제한 | 제휴 계약·CC 콘텐츠 한정, 자동 차단 필터 |\n| 싱크 정확도 | AI 자동 매핑 오차 | 수동 편집기 + 사용자 기여 보상 |\n| 성능 병목 | HLS 첫 세그먼트 지연 | 프리패치, CDN edge worker |\n| WebSocket 스케일 | 50 K 동접 시 세션 폭주 | Redis pub/sub + shard-id 확장 |\n\n### Project Delivery Risks\n| 위험 | 설명 | 대응·비상계획 |\n|---|---|---|\n| 일정 지연 | Phase 1 핵심 기능 복잡성 | 모듈화·병렬 개발, 스코프 컷 |\n| 인력 부족 | FE/BE 동시 병목 | 외부 컨트랙터 확보, 우선순위 재조정 |\n| 품질 저하 | 테스트 커버리지 부족 | 필수 e2e 30 %, 코드 리뷰 게이트 |\n| 배포 실패 | 무중단 배포 미숙 | Staging =Prod 파라미터, 블루-그린 롤백 |\n\n---",
      "writedAt": "2025-07-01T10:49:11.604Z"
    },
    {
      "type": "guideline",
      "content": "# Project Code Guideline\n\n---\n\n## 1. Project Overview\n\nThis project is a web-based Japanese language learning platform integrating radio/podcast audio, synchronized scripts, and vocabulary tools. The tech stack is:\n\n- **Frontend**: SvelteKit 1.x (TypeScript), TailwindCSS, DaisyUI\n- **Backend**: FastAPI (Python 3.11, async), WebSocket, Pydantic v2\n- **Database/Auth**: Supabase (PostgreSQL 15, Row-Level Security)\n- **Infra**: Vercel (FE), Fly.io (BE), Cloudflare CDN (HLS audio)\n- **Architecture**:\n  - Domain-driven, modular boundaries (`auth`, `content`, `learning`, `userStats`)\n  - Clear separation: presentation → application(service) → domain(model) → infrastructure\n  - REST for CRUD, WebSocket for real-time sync\n\n---\n\n## 2. Core Principles\n\n1. **Explicitness**: All code MUST be self-explanatory and avoid magic values or side effects.\n2. **Single Responsibility**: Each module, function, or component MUST serve one clear purpose.\n3. **Type Safety**: All TypeScript and Python code MUST use strict typing.\n4. **Accessibility First**: UI MUST comply with WCAG 2.1 AA and be keyboard navigable.\n5. **Fail Fast & Safe**: Errors MUST be handled explicitly and surfaced early.\n\n---\n\n## 3. Language-Specific Guidelines\n\n### 3.1 SvelteKit (TypeScript)\n\n#### File Organization\n\n- MUST follow `/src/lib/<domain>/<type>/` for components, stores, hooks, and utils.\n- Each route logic MUST reside in `/src/routes/<feature>/+page.svelte` or `+page.ts`.\n- Shared UI and logic MUST be placed under `/src/lib/`.\n\n```typescript\n// MUST: Domain-driven file structure\n/src/lib/learning/components/Flashcard.svelte\n/src/lib/learning/stores/progress.ts\n/src/lib/learning/hooks/useRepeat.ts\n```\n\n#### Import/Dependency Management\n\n- MUST use absolute imports from `src/lib` for internal modules.\n- MUST import only required functions/components, NEVER import `*` unless importing types.\n- External dependencies MUST be listed in `package.json` and kept minimal.\n\n```typescript\n// MUST: Explicit, minimal import\nimport { Flashcard } from '$lib/learning/components/Flashcard.svelte';\n```\n\n#### Error Handling\n\n- MUST handle async errors in UI logic and display user-friendly messages.\n- MUST use try/catch in async stores or load functions.\n- Errors from API calls MUST be surfaced via SvelteKit's `error` or custom error boundaries.\n\n```typescript\n// MUST: Handle async error in load function\nexport const load = async ({ fetch }) => {\n  try {\n    const res = await fetch('/api/v1/words');\n    if (!res.ok) throw new Error('Failed to load words');\n    return { words: await res.json() };\n  } catch (err) {\n    throw error(500, 'Vocabulary fetch failed');\n  }\n};\n```\n\n---\n\n### 3.2 FastAPI (Python 3.11)\n\n#### File Organization\n\n- MUST follow `/app/<layer>/<domain>.py` (e.g., `/app/api/v1/words.py`).\n- Each API resource MUST have its own module.\n- Business logic MUST be in `/services/`, models in `/models/`, and shared utils in `/utils/`.\n\n```python\n# MUST: API resource module\n/app/api/v1/scripts.py\n/app/services/sentence_sync.py\n/app/models/word.py\n```\n\n#### Import/Dependency Management\n\n- MUST use explicit relative imports within the app.\n- MUST NOT import unused modules.\n- External dependencies MUST be declared in `pyproject.toml` and kept up-to-date.\n\n```python\n# MUST: Explicit import\nfrom app.services.sentence_sync import align_sentences\n```\n\n#### Error Handling\n\n- MUST use FastAPI exception handlers for API errors.\n- All endpoints MUST validate input/output via Pydantic schemas.\n- Errors in async tasks MUST be logged and reported (e.g., Sentry).\n\n```python\n# MUST: Pydantic validation and error response\nfrom fastapi import HTTPException\n\n@app.post(\"/api/v1/words\")\nasync def add_word(word: WordCreate):\n    if not valid_japanese(word.text):\n        raise HTTPException(status_code=400, detail=\"Invalid word\")\n    ...\n```\n\n---\n\n## 4. Code Style Rules\n\n### 4.1 MUST Follow\n\n#### Frontend\n\n- **Use TypeScript everywhere** for type safety and maintainability.\n- **Component Naming**: MUST use PascalCase for Svelte components.\n- **TailwindCSS**: MUST use utility classes; avoid custom CSS unless necessary.\n- **Accessibility**: All interactive elements MUST have accessible labels and keyboard focus.\n\n```svelte\n<!-- MUST: Accessible button with Tailwind -->\n<button\n  class=\"btn btn-primary\"\n  aria-label=\"Play Sentence\"\n  on:click={playSentence}\n>\n  ▶️\n</button>\n```\n\n- **State Management**: MUST use Svelte stores for global state. Each store MUST be domain-scoped and minimal.\n\n```typescript\n// MUST: Minimal, domain-scoped store\nimport { writable } from 'svelte/store';\n\nexport const currentSentence = writable<number | null>(null);\n```\n\n#### Backend\n\n- **Async/Await**: All I/O MUST be async; blocking code is prohibited.\n- **Pydantic Models**: All request/response MUST use Pydantic v2 models.\n- **API Versioning**: All endpoints MUST be under `/api/v1/`.\n- **Logging**: MUST log errors with structured JSON (for Loki/Grafana compatibility).\n\n```python\n# MUST: Async endpoint with Pydantic\nfrom fastapi import APIRouter\nfrom app.models.word import WordCreate, WordOut\n\nrouter = APIRouter()\n\n@router.post(\"/words\", response_model=WordOut)\nasync def create_word(word: WordCreate):\n    ...\n```\n\n### 4.2 MUST NOT Do\n\n- **Monolithic Files**: MUST NOT combine multiple domains or responsibilities in a single file.\n- **Complex State**: MUST NOT use complex, nested stores or global variables for state management.\n- **Implicit Imports**: MUST NOT use wildcard imports (`import *`) except for TypeScript types.\n- **Uncaught Errors**: MUST NOT leave async errors unhandled.\n\n```typescript\n// MUST NOT: Multiple responsibilities in one file\n// BAD: Player logic, UI, and API calls all mixed\n```\n\n```python\n# MUST NOT: Synchronous DB call in async context\ndef get_words():\n    return db.query(\"SELECT * FROM words\")\n# Use async def and await instead.\n```\n\n---\n\n## 5. Architecture Patterns\n\n### 5.1 Component/Module Structure\n\n- **Frontend**: Each feature (e.g., Player, Vocabulary, Review) MUST be a folder with components, stores, and hooks.\n- **Backend**: Each API resource under `/api/v1/`, with service logic separated into `/services/`.\n\n```plaintext\n/src/lib/player/components/PlayerControls.svelte\n/app/api/v1/player.py\n/app/services/player_sync.py\n```\n\n### 5.2 Data Flow Patterns\n\n- **REST**: Use for CRUD and initial data fetches.\n- **WebSocket**: Use for real-time sync (e.g., sentence highlighting, player progress).\n- **Optimistic UI**: On user action, update UI immediately, then confirm via WebSocket ack or API response.\n\n```typescript\n// MUST: Optimistic UI update\nbookmark.set(true); // Assume success\napi.bookmarkWord(wordId).catch(() => bookmark.set(false)); // Revert if error\n```\n\n### 5.3 State Management\n\n- **Svelte Stores**: MUST be minimal, per-domain, and avoid deep nesting.\n- **Derived Stores**: Use for computed state; avoid direct mutation.\n- **No Redux/MobX**: Only Svelte's built-in stores or lightweight custom stores.\n\n```typescript\n// MUST: Derived store for progress\nimport { derived } from 'svelte/store';\nexport const progressPercent = derived(\n  [currentSentence, totalSentences],\n  ([$current, $total]) => $total ? ($current / $total) * 100 : 0\n);\n```\n\n### 5.4 API Design Standards\n\n- **Versioning**: All endpoints under `/api/v1/`.\n- **Schema Validation**: All payloads MUST be validated with Pydantic.\n- **Consistent Error Format**: All errors MUST return `{ \"detail\": str, \"code\": str }`.\n- **Auth**: All protected endpoints MUST require JWT (OAuth2).\n\n```python\n# MUST: Consistent error response\nraise HTTPException(status_code=403, detail=\"Permission denied\", headers={\"X-Error-Code\": \"PERMISSION_DENIED\"})\n```\n\n---\n\n## Example Code Snippets\n\n```typescript\n// MUST: Single-responsibility Svelte component\n<script lang=\"ts\">\n  export let sentence: string;\n  export let isActive: boolean;\n</script>\n\n<p class:highlight={isActive}>{sentence}</p>\n\n<style>\n  .highlight { background: yellow; }\n</style>\n// Explanation: This component only renders a sentence with highlight logic, no unrelated logic.\n```\n\n```typescript\n// MUST NOT: Mixing unrelated logic in one component\n<script lang=\"ts\">\n  // BAD: Fetching, state, and UI all mixed\n  let sentence = '';\n  fetch('/api/v1/sentence').then(...);\n  // Also handles player state, vocabulary, etc.\n</script>\n// Explanation: Break into separate components and stores.\n```\n\n```python\n# MUST: Async FastAPI endpoint with Pydantic validation\nfrom fastapi import APIRouter, HTTPException\nfrom app.models.user import UserCreate, UserOut\n\nrouter = APIRouter()\n\n@router.post(\"/users\", response_model=UserOut)\nasync def create_user(user: UserCreate):\n    try:\n        user_obj = await create_user_in_db(user)\n        return user_obj\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=\"User creation failed\")\n// Explanation: Uses async, Pydantic, and explicit error handling.\n```\n\n```python\n# MUST NOT: No validation, sync code in async context\n@app.post(\"/users\")\ndef create_user(user):\n    user_obj = create_user_in_db(user)  # Not async\n    return user_obj\n// Explanation: Violates async, validation, and error handling requirements.\n```\n\n---\n\n## Quality Criteria\n\n- **Specificity**: All rules are strict and tailored to the SvelteKit + FastAPI + Supabase stack.\n- **Justification**: Each rule enforces maintainability, scalability, and accessibility per PRD/TRD.\n- **Practicality**: Patterns are minimal, modular, and directly implementable by all team members.\n- **Consistency**: All code MUST pass lint, type-check, and CI before merge.\n- **Review**: Every PR MUST be reviewed for adherence to this guideline and rejected if non-compliant.\n\n---\n\n**This document is the definitive coding standard for this project. All contributors are required to follow these guidelines without exception.**",
      "writedAt": "2025-07-01T10:49:11.604Z"
    }
  ]
}